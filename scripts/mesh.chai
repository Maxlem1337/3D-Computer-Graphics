/*
Mesh with bad bounding box:
(Box(math::Interval<double>(-1, 1), math::Interval<double>(-1, 1), math::Interval<double>(-1, 1)))
INFO  [performance] Executed [Rendering script] in [1.27678 minutes]
INFO  [performance] Executed [int __cdecl main(int,char **)] in [1.3251 minutes]

mesh with optimized bounding box and accelerator:
INFO  [performance] Executed [Rendering script] in [10.745 seconds]
INFO  [performance] Executed [int __cdecl main(int,char **)] in [13.605 seconds]

mesh with optimized bounding box and WITHOUT accelerator:
this takes a long time, and crashes my video drivers.

*/

//global mesh_path = "E:\\Programs\\Dropbox\\Dropbox\\UCLL\\3d\\buddha\\happy_vrip_res4.ply"
//global mesh_path = "E:\\Programs\\Dropbox\\Dropbox\\UCLL\\3d\\dragon_recon\\dragon_vrip_res4.ply"
//global mesh_path = "E:\\Programs\\Dropbox\\Dropbox\\UCLL\\3d\\bunny\\reconstruction\\bun_zipper_res4.ply"
global mesh_path = "C:\\Users\\maxim\\Dropbox\\UCLL\\3d\\bunny\\reconstruction\\bun_zipper_res4.ply"
global mesh_primitive = create_mesh(mesh_path)

def scene_at(now)
{
  var camera = Cameras.perspective( [ "eye": pos(0, 0, 0.5),
                                      "look_at": pos(0,0,0) ] )

  var a = Animations.animate(0, 360, seconds(1) )

  var white = Materials.uniform( [ "ambient": Colors.white() * 0.1,
                                   "diffuse": Colors.white() * 0.8 ] )
  var black = Materials.uniform( [ "ambient": Colors.white() * 0.1,
                                   "diffuse": Colors.black() * 0.8 ] )
                                   
  var back_wall_material = Materials.uniform( [ "ambient": Colors.white(),
                                            "diffuse": Colors.blue() * 0.8 ] )

  var mesh_material = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 0.8] )
                   

  var floor_material = Materials.uniform( [ "ambient": Colors.green() * 0.1,
                                            "diffuse": Colors.green() * 0.8,
                                            "reflectivity": 0.5 ] )
                                            
    //var mesh_material = Materials.uniform( [ "ambient": Colors.white() * 0.5] )
                                         
var primitives = []
primitives.push_back( translate(vec(0,-1,0), decorate(floor_material, xz_plane())) )
primitives.push_back( translate(vec(0,0,-1), decorate(back_wall_material, xy_plane())) )
primitives.push_back( decorate(mesh_material, rotate_around_y(degrees(a[now]), accelerate(mesh_primitive))) )



  var lights = [ Lights.omnidirectional( pos(2,2,2), Colors.white() ) ]

  create_scene(camera, union(primitives), lights)
}

var raytracer = Raytracers.v5()

var renderer = Renderers.standard( [ "width": 250,
                                     "height": 250,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(1)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )